###################
Server Installation
###################

.. index:: Hardware requirements

Hardware Requirements
=====================

The installation of an Entando web application does not need heavy
requirements of CPU and memory, however depending on the project
configuration, the *development* environment could need heavy CPU and
memory usage.

A tipical production server:

-  4 GB di RAM (or more depending on the traffic and users)
-  Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz
-  1 GB of free disk space

The previous hardware configuration has been used in many projects. The
disk space is used mainly by the *Maven* dependencies while the
installation phase, when in production the occupied space depends of the
loaded resources (documents, images, files, etc).

.. index:: Software Requirements

Software Requirements
=====================

Application Server
------------------

The following software requirements are needed to compile and run
Entando in a server

-  Oracle JDK 1.7+ (`Oracle
   website <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`__)
-  Apache Maven 3+ (`Maven
   website <http://maven.apache.org/download.cgi>`__)
-  Apache Ant 1.8.x + (`Ant
   website <http://ant.apache.org/bindownload.cgi>`__)
-  Apache Tomcat 6.x + *or* 7.x+ (`Tomcat
   website <http://tomcat.apache.org/download-70.cgi>`__)
-  JDBC Driver for Tomcat (depending on the DBMS)

.. index:: Web Server

Web Server
----------

Needed to serve the static resources and relieve the Tomcat's load. \*
Apache 2.2 (`Apache website <http://httpd.apache.org/download.cgi>`__)

.. index:: Database, PostgreSQL, MySQL

Database
--------

Entando is ready to run with these DBMS, install accordingly the setup
of your web application:

-  PostgreSQL 8.4+ (`PostgreSQL
   website <http://www.postgresql.org/download/>`__)
-  MySQL Community Server 5.6+ (`Community download
   page <http://dev.mysql.com/downloads/mysql/>`__)

--------------

.. index:: Production Environment, Tomcat

Entando in Production, prepare the server
=========================================

Install Tomcat
--------------

Get the installer from the `Tomcat
homepage <http://tomcat.apache.org/download-70.cgi>`__ or check if your
system package manager provide a preconfigured Tomcat.

Configure the ``trimSpaces`` Tomcat directive
---------------------------------------------

Open the ``<TOMCAT_HOME>\con\web.xml`` file and add the
``init-param``\ element into the jsp servlet configuration:

.. code:: xml

    <web-app ...>
        ...
        <servlet>
            <servlet-name>jsp</servlet-name>
            <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
            ...
            <!-- copy from here... -->
            <init-param>
                <param-name>trimSpaces</param-name>
                <param-value>true</param-value>
            </init-param>
            <!-- ...to here -->
            ...
        </servlet>
        ...
    </web-app>

**Tip**: just find the keyword ``trimSpaces`` and you will find exactly
where to place the init-param element

.. index:: JDBC, PostgreSQL, MySQL, Derby

Install the JDBC driver
-----------------------

Download the JDBC driver and copy it into the ``<TOMCAT_HOME>\libs``
folder.

*Remeber*: the JDBC driver is a file with jar extension. If needed
unpack the downloaded file and locate the proper jar file.

-  `PostgreSQL
   JDBC <http://jdbc.postgresql.org/download/postgresql-9.3-1102.jdbc3.jar>`__
-  `MySQL
   JDBC <http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.34.zip>`__
-  `Derby
   JDBC <http://it.apache.contactlab.it/db/derby/db-derby-10.11.1.1/db-derby-10.11.1.1-bin.zip>`__


.. index:: Apache, Web Server

Install Apache2 httpd
---------------------

Download Apache2 httpd for the webserver installation

-  Windows: get
   `apache\_2.2.9-win32-x86-openssl-0.9.8h-r2.msi <http://archive.apache.org/dist/httpd/binaries/win32/apache_2.2.9-win32-x86-openssl-0.9.8h-r2.msi>`__
-  Ubuntu: ``sudo apt-get install --yes apache2``
-  Other systems: check if your system package manager provide a
   preconfigured Apache2 version 2.2 or check the `Apache Http Server
   page <http://httpd.apache.org/download.cgi>`__

Tomcat Connectors ``mod_jk``
----------------------------

Install and configure the ``mod_jk`` in order to work with Apache and
Tomcat

-  **Windows**: `download version
   1.2.40 <http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/windows/tomcat-connectors-1.2.40-windows-x86_64-httpd-2.4.x.zip>`__
   and copy the mod-jk file into ``apachedir\modules\`` folder

-  **Ubuntu**: ``sudo apt-get install libapache2-mod-jk``

-  **Other systems**: check if your system package manager provide a
   preconfigured package or check the official `Apache Tomcat Connector
   page <http://tomcat.apache.org/connectors-doc/>`__.

Setup ``mod-jk`` editing the ``apachedir\conf\workers.properties`` file,
usually it should contain something similar to:

.. code:: ini

    worker.list=ajp13
    worker.myworker.type=ajp13
    worker.myworker.host=localhost
    worker.myworker.port=8009

Tomcat URI Encoding
-------------------

Setup the URI Encoding for Tomcat, it allows to process the querystrings
with the UTF-8 encoding.

Edit the file \`\ ``<TOMCAT_HOME>/conf/server.xml``, add the
URIEncoding="UTF-8" attribute to the Connector with port 8080. See The
example

.. code:: xml

    ...
    <Server ...>
        ...
        <Service name="Catalina">
            ...

            <Connector port="8080" protocol="HTTP/1.1"
                connectionTimeout="20000"
                redirectPort="8443"
                URIEncoding="UTF-8"
            />

            ...
        </Service>
        ...
    </Server>
    ...

Apache VirtualHost
------------------

Configure a *virtual host* adapting the pathes for your system.

Remember to change the \`\`APPNAME\`\`\` string with the name of your
actual webapp.

.. code:: apache

    <VirtualHost FQDN:80>
        ServerName FQDN
        DocumentRoot /var/www/FQDN

        ErrorLog /var/log/apache2/FQDN_error.log
        LogLevel warn
        CustomLog /var/log/apache2/FQDN_access.log combined

        # Use SetEnvIf to st no-jk when /home/ is encountered
        SetEnvIf Request_URI "/APPNAME/resources/cms/*" no-jk
        SetEnvIf Request_URI "/APPNAME/resources/plugins/*" no-jk

        Alias /APPNAME/resources/cms /var/lib/tomcat6/webapps/APPNAME/resources/cms
        Alias /APPNAME/resources/plugins /var/lib/tomcat6/webapps/APPNAME/resources/plugins

        <Directory "/var/lib/tomcat6/webapps/APPNAME/resources/cms">
            Options -Indexes
            AllowOverride None
            Order allow,deny
            Allow from all
        </Directory>

        <Directory "/var/lib/tomcat6/webapps/APPNAME/resources/plugins">
            Options -Indexes
            AllowOverride None
            Order allow,deny
            Allow from all
        </Directory>

        JkMount /APPNAME/* ajp13_worker
        RedirectMatch ^/$ /APPNAME/
    </VirtualHost>
